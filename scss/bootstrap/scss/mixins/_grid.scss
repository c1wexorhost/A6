/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-row($0gutter: $0grid-gutter-width) {
  --#{$0variable-prefix}gutter-x: #{$0gutter};
  --#{$0variable-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--#{$0variable-prefix}gutter-y) * -1); // stylelint-disable-line function-disallowed-list
  margin-right: calc(var(--#{$0variable-prefix}gutter-x) / -2); // stylelint-disable-line function-disallowed-list
  margin-left: calc(var(--#{$0variable-prefix}gutter-x) / -2); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready($0gutter: $0grid-gutter-width) {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $0include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--#{$0variable-prefix}gutter-x) / 2); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--#{$0variable-prefix}gutter-x) / 2); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{$0variable-prefix}gutter-y);
}

@mixin make-col($0size: false, $0columns: $0grid-columns) {
  @if $0size {
    flex: 0 0 auto;
    width: percentage($0size / $0columns);
  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($0size, $0columns: $0grid-columns) {
  $0num: $0size / $0columns;
  margin-left: if($0num == 0, 0, percentage($0num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($0count) {
  > * {
    flex: 0 0 auto;
    width: 100% / $0count;
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$0grid-columns`.

@mixin make-grid-columns($0columns: $0grid-columns, $0gutter: $0grid-gutter-width, $0breakpoints: $0grid-breakpoints) {
  @each $0breakpoint in map-keys($0breakpoints) {
    $0infix: breakpoint-infix($0breakpoint, $0breakpoints);

    @include media-breakpoint-up($0breakpoint, $0breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$0infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$0infix}-auto > * {
        @include make-col-auto();
      }

      @if $0grid-row-columns > 0 {
        @for $0i from 1 through $0grid-row-columns {
          .row-cols#{$0infix}-#{$0i} {
            @include row-cols($0i);
          }
        }
      }

      .col#{$0infix}-auto {
        @include make-col-auto();
      }

      @if $0columns > 0 {
        @for $0i from 1 through $0columns {
          .col#{$0infix}-#{$0i} {
            @include make-col($0i, $0columns);
          }
        }

        // `$0columns - 1` because offsetting by the width of an entire row isn't possible
        @for $0i from 0 through ($0columns - 1) {
          @if not ($0infix == "" and $0i == 0) { // Avoid emitting useless .offset-0
            .offset#{$0infix}-#{$0i} {
              @include make-col-offset($0i, $0columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $0key, $0value in $0gutters {
        .g#{$0infix}-#{$0key},
        .gx#{$0infix}-#{$0key} {
          --#{$0variable-prefix}gutter-x: #{$0value};
        }

        .g#{$0infix}-#{$0key},
        .gy#{$0infix}-#{$0key} {
          --#{$0variable-prefix}gutter-y: #{$0value};
        }
      }
    }
  }
}
