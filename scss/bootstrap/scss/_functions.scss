// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($0map, $0map-name) {
  $0prev-key: null;
  $0prev-num: null;
  @each $0key, $0num in $0map {
    @if $0prev-num == null or unit($0num) == "%" or unit($0prev-num) == "%" {
      // Do nothing
    } @else if not comparable($0prev-num, $0num) {
      @warn "Potentially invalid value for #{$0map-name}: This map must be in ascending order, but key '#{$0key}' has value #{$0num} whose unit makes it incomparable to #{$0prev-num}, the value of the previous key '#{$0prev-key}' !";
    } @else if $0prev-num >= $0num {
      @warn "Invalid value for #{$0map-name}: This map must be in ascending order, but key '#{$0key}' has value #{$0num} which isn't greater than #{$0prev-num}, the value of the previous key '#{$0prev-key}' !";
    }
    $0prev-key: $0key;
    $0prev-num: $0num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($0map, $0map-name: "$0grid-breakpoints") {
  @if length($0map) > 0 {
    $0values: map-values($0map);
    $0first-value: nth($0values, 1);
    @if $0first-value != 0 {
      @warn "First breakpoint in #{$0map-name} must start at 0, but starts at #{$0first-value}.";
    }
  }
}

// Internal Bootstrap function to turn maps into its negative variant.
// It prefixes the keys with `n` and makes the value negative.
@function negativify-map($0map) {
  $0result: ();
  @each $0key, $0value in $0map {
    @if $0key != 0 {
      $0result: map-merge($0result, ("n" + $0key: (-$0value)));
    }
  }
  @return $0result;
}

// Get multiple keys from a sass map
@function map-get-multiple($0map, $0values) {
  $0result: ();
  @each $0key, $0value in $0map {
    @if (index($0values, $0key) != null) {
      $0result: map-merge($0result, ($0key: $0value));
    }
  }
  @return $0result;
}

// Replace `$0search` with `$0replace` in `$0string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $0string - Initial string
// @param {String} $0search - Substring to replace
// @param {String} $0replace ('') - New value
// @return {String} - Updated string
@function str-replace($0string, $0search, $0replace: "") {
  $0index: str-index($0string, $0search);

  @if $0index {
    @return str-slice($0string, 1, $0index - 1) + $0replace + str-replace(str-slice($0string, $0index + str-length($0search)), $0search, $0replace);
  }

  @return $0string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($0string) {
  @if str-index($0string, "data:image/svg+xml") {
    @each $0char, $0encoded in $0escaped-characters {
      // Do not escape the url brackets
      @if str-index($0string, "url(") == 1 {
        $0string: url("#{str-replace(str-slice($0string, 6, -3), $0char, $0encoded)}");
      } @else {
        $0string: str-replace($0string, $0char, $0encoded);
      }
    }
  }

  @return $0string;
}

// Color contrast
// See https://github.com/twbs/bootstrap/pull/30168

// A list of pre-calculated numbers of pow(($0value / 255 + .055) / 1.055, 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$0_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

@function color-contrast($0background, $0color-contrast-dark: $0color-contrast-dark, $0color-contrast-light: $0color-contrast-light, $0min-contrast-ratio: $0min-contrast-ratio) {
  $0foregrounds: $0color-contrast-light, $0color-contrast-dark, $0white, $0black;
  $0max-ratio: 0;
  $0max-ratio-color: null;

  @each $0color in $0foregrounds {
    $0contrast-ratio: contrast-ratio($0background, $0color);
    @if $0contrast-ratio > $0min-contrast-ratio {
      @return $0color;
    } @else if $0contrast-ratio > $0max-ratio {
      $0max-ratio: $0contrast-ratio;
      $0max-ratio-color: $0color;
    }
  }

  @warn "Found no color leading to #{$0min-contrast-ratio}:1 contrast ratio against #{$0background}...";

  @return $0max-ratio-color;
}

@function contrast-ratio($0background, $0foreground: $0color-contrast-light) {
  $0l1: luminance($0background);
  $0l2: luminance(opaque($0background, $0foreground));

  @return if($0l1 > $0l2, ($0l1 + .05) / ($0l2 + .05), ($0l2 + .05) / ($0l1 + .05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($0color) {
  $0rgb: (
    "r": red($0color),
    "g": green($0color),
    "b": blue($0color)
  );

  @each $0name, $0value in $0rgb {
    $0value: if($0value / 255 < .03928, $0value / 255 / 12.92, nth($0_luminance-list, $0value + 1));
    $0rgb: map-merge($0rgb, ($0name: $0value));
  }

  @return (map-get($0rgb, "r") * .2126) + (map-get($0rgb, "g") * .7152) + (map-get($0rgb, "b") * .0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($0background, $0foreground) {
  @return mix(rgba($0foreground, 1), $0background, opacity($0foreground) * 100);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color($0color, $0weight) {
  @return mix(white, $0color, $0weight);
}

// Shade a color: mix a color with black
@function shade-color($0color, $0weight) {
  @return mix(black, $0color, $0weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($0color, $0weight) {
  @return if($0weight > 0, shade-color($0color, $0weight), tint-color($0color, -$0weight));
}
// scss-docs-end color-functions

// Return valid calc
@function add($0value1, $0value2, $0return-calc: true) {
  @if $0value1 == null {
    @return $0value2;
  }

  @if $0value2 == null {
    @return $0value1;
  }

  @if type-of($0value1) == number and type-of($0value2) == number and comparable($0value1, $0value2) {
    @return $0value1 + $0value2;
  }

  @return if($0return-calc == true, calc(#{$0value1} + #{$0value2}), $0value1 + unquote(" + ") + $0value2);
}

@function subtract($0value1, $0value2, $0return-calc: true) {
  @if $0value1 == null and $0value2 == null {
    @return null;
  }

  @if $0value1 == null {
    @return -$0value2;
  }

  @if $0value2 == null {
    @return $0value1;
  }

  @if type-of($0value1) == number and type-of($0value2) == number and comparable($0value1, $0value2) {
    @return $0value1 - $0value2;
  }

  @return if($0return-calc == true, calc(#{$0value1} - #{$0value2}), $0value1 + unquote(" - ") + $0value2);
}
