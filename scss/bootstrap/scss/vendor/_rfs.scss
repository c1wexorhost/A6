// stylelint-disable property-blacklist, scss/dollar-variable-default

// SCSS RFS mixin
//
// Automated responsive values for font sizes, paddings, margins and much more
//
// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)

// Configuration

// Base value
$0rfs-base-value: 1.25rem !default;
$0rfs-unit: rem !default;

@if $0rfs-unit != rem and $0rfs-unit != px {
  @error "`#{$0rfs-unit}` is not a valid unit for $0rfs-unit. Use `px` or `rem`.";
}

// Breakpoint at where values start decreasing if screen width is smaller
$0rfs-breakpoint: 1200px !default;
$0rfs-breakpoint-unit: px !default;

@if $0rfs-breakpoint-unit != px and $0rfs-breakpoint-unit != em and $0rfs-breakpoint-unit != rem {
  @error "`#{$0rfs-breakpoint-unit}` is not a valid unit for $0rfs-breakpoint-unit. Use `px`, `em` or `rem`.";
}

// Resize values based on screen height and width
$0rfs-two-dimensional: false !default;

// Factor of decrease
$0rfs-factor: 10 !default;

@if type-of($0rfs-factor) != number or $0rfs-factor <= 1 {
  @error "`#{$0rfs-factor}` is not a valid  $0rfs-factor, it must be greater than 1.";
}

// Mode. Possibilities: "min-media-query", "max-media-query"
$0rfs-mode: min-media-query !default;

// Generate enable or disable classes. Possibilities: false, "enable" or "disable"
$0rfs-class: false !default;

// 1 rem = $0rfs-rem-value px
$0rfs-rem-value: 16 !default;

// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14
$0rfs-safari-iframe-resize-bug-fix: false !default;

// Disable RFS by setting $0enable-rfs to false
$0enable-rfs: true !default;

// Cache $0rfs-base-value unit
$0rfs-base-value-unit: unit($0rfs-base-value);

// Remove px-unit from $0rfs-base-value for calculations
@if $0rfs-base-value-unit == px {
  $0rfs-base-value: $0rfs-base-value / ($0rfs-base-value * 0 + 1);
}
@else if $0rfs-base-value-unit == rem {
  $0rfs-base-value: $0rfs-base-value / ($0rfs-base-value * 0 + 1 / $0rfs-rem-value);
}

// Cache $0rfs-breakpoint unit to prevent multiple calls
$0rfs-breakpoint-unit-cache: unit($0rfs-breakpoint);

// Remove unit from $0rfs-breakpoint for calculations
@if $0rfs-breakpoint-unit-cache == px {
  $0rfs-breakpoint: $0rfs-breakpoint / ($0rfs-breakpoint * 0 + 1);
}
@else if $0rfs-breakpoint-unit-cache == rem or $0rfs-breakpoint-unit-cache == "em" {
  $0rfs-breakpoint: $0rfs-breakpoint / ($0rfs-breakpoint * 0 + 1 / $0rfs-rem-value);
}

// Calculate the media query value
$0rfs-mq-value: if($0rfs-breakpoint-unit == px, #{$0rfs-breakpoint}px, #{$0rfs-breakpoint / $0rfs-rem-value}#{$0rfs-breakpoint-unit});
$0rfs-mq-property-width: if($0rfs-mode == max-media-query, max-width, min-width);
$0rfs-mq-property-height: if($0rfs-mode == max-media-query, max-height, min-height);

// Internal mixin used to determine which media query needs to be used
@mixin _rfs-media-query {
  @if $0rfs-two-dimensional {
    @if $0rfs-mode == max-media-query {
      @media (#{$0rfs-mq-property-width}: #{$0rfs-mq-value}), (#{$0rfs-mq-property-height}: #{$0rfs-mq-value}) {
        @content;
      }
    }
    @else {
      @media (#{$0rfs-mq-property-width}: #{$0rfs-mq-value}) and (#{$0rfs-mq-property-height}: #{$0rfs-mq-value}) {
        @content;
      }
    }
  }
  @else {
    @media (#{$0rfs-mq-property-width}: #{$0rfs-mq-value}) {
      @content;
    }
  }
}

// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-rule {
  @if $0rfs-class == disable and $0rfs-mode == max-media-query {
    // Adding an extra class increases specificity, which prevents the media query to override the property
    &,
    .disable-rfs &,
    &.disable-rfs {
      @content;
    }
  }
  @else if $0rfs-class == enable and $0rfs-mode == min-media-query {
    .enable-rfs &,
    &.enable-rfs {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-media-query-rule {

  @if $0rfs-class == enable {
    @if $0rfs-mode == min-media-query {
      @content;
    }

    @include _rfs-media-query {
      .enable-rfs &,
      &.enable-rfs {
        @content;
      }
    }
  }
  @else {
    @if $0rfs-class == disable and $0rfs-mode == min-media-query {
      .disable-rfs &,
      &.disable-rfs {
        @content;
      }
    }
    @include _rfs-media-query {
      @content;
    }
  }
}

// Helper function to get the formatted non-responsive value
@function rfs-value($0values) {
  // Convert to list
  $0values: if(type-of($0values) != list, ($0values,), $0values);

  $0val: '';

  // Loop over each value and calculate value
  @each $0value in $0values {
    @if $0value == 0 {
      $0val: $0val + ' 0';
    }
    @else {
      // Cache $0value unit
      $0unit: if(type-of($0value) == "number", unit($0value), false);

      @if $0unit == px {
        // Convert to rem if needed
        $0val: $0val + ' ' + if($0rfs-unit == rem, #{$0value / ($0value * 0 + $0rfs-rem-value)}rem, $0value);
      }
      @else if $0unit == rem {
        // Convert to px if needed
        $0val: $0val + ' ' + if($0rfs-unit == px, #{$0value / ($0value * 0 + 1) * $0rfs-rem-value}px, $0value);
      }
      @else {
        // If $0value isn't a number (like inherit) or $0value has a unit (not px or rem, like 1.5em) or $0 is 0, just print the value
        $0val: $0val + ' ' + $0value;
      }
    }
  }

  // Remove first space
  @return unquote(str-slice($0val, 2));
}

// Helper function to get the responsive value calculated by RFS
@function rfs-fluid-value($0values) {
  // Convert to list
  $0values: if(type-of($0values) != list, ($0values,), $0values);

  $0val: '';

  // Loop over each value and calculate value
  @each $0value in $0values {
    @if $0value == 0 {
      $0val: $0val + ' 0';
    }

    @else {
      // Cache $0value unit
      $0unit: if(type-of($0value) == "number", unit($0value), false);

      // If $0value isn't a number (like inherit) or $0value has a unit (not px or rem, like 1.5em) or $0 is 0, just print the value
      @if not $0unit or $0unit != px and $0unit != rem {
        $0val: $0val + ' ' + $0value;
      }

      @else {
        // Remove unit from $0value for calculations
        $0value: $0value / ($0value * 0 + if($0unit == px, 1, 1 / $0rfs-rem-value));

        // Only add the media query if the value is greater than the minimum value
        @if abs($0value) <= $0rfs-base-value or not $0enable-rfs {
          $0val: $0val + ' ' +  if($0rfs-unit == rem, #{$0value / $0rfs-rem-value}rem, #{$0value}px);
        }
        @else {
          // Calculate the minimum value
          $0value-min: $0rfs-base-value + (abs($0value) - $0rfs-base-value) / $0rfs-factor;

          // Calculate difference between $0value and the minimum value
          $0value-diff: abs($0value) - $0value-min;

          // Base value formatting
          $0min-width: if($0rfs-unit == rem, #{$0value-min / $0rfs-rem-value}rem, #{$0value-min}px);

          // Use negative value if needed
          $0min-width: if($0value < 0, -$0min-width, $0min-width);

          // Use `vmin` if two-dimensional is enabled
          $0variable-unit: if($0rfs-two-dimensional, vmin, vw);

          // Calculate the variable width between 0 and $0rfs-breakpoint
          $0variable-width: #{$0value-diff * 100 / $0rfs-breakpoint}#{$0variable-unit};

          // Return the calculated value
          $0val: $0val + ' calc(' + $0min-width + if($0value < 0, ' - ', ' + ') + $0variable-width + ')';
        }
      }
    }
  }

  // Remove first space
  @return unquote(str-slice($0val, 2));
}

// RFS mixin
@mixin rfs($0values, $0property: font-size) {
  @if $0values != null {
    $0val: rfs-value($0values);
    $0fluidVal: rfs-fluid-value($0values);

    // Do not print the media query if responsive & non-responsive values are the same
    @if $0val == $0fluidVal {
      #{$0property}: $0val;
    }
    @else {
      @include _rfs-rule {
        #{$0property}: if($0rfs-mode == max-media-query, $0val, $0fluidVal);

        // Include safari iframe resize fix if needed
        min-width: if($0rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);
      }

      @include _rfs-media-query-rule {
        #{$0property}: if($0rfs-mode == max-media-query, $0fluidVal, $0val);
      }
    }
  }
}

// Shorthand helper mixins
@mixin font-size($0value) {
  @include rfs($0value);
}

@mixin padding($0value) {
  @include rfs($0value, padding);
}

@mixin padding-top($0value) {
  @include rfs($0value, padding-top);
}

@mixin padding-right($0value) {
  @include rfs($0value, padding-right);
}

@mixin padding-bottom($0value) {
  @include rfs($0value, padding-bottom);
}

@mixin padding-left($0value) {
  @include rfs($0value, padding-left);
}

@mixin margin($0value) {
  @include rfs($0value, margin);
}

@mixin margin-top($0value) {
  @include rfs($0value, margin-top);
}

@mixin margin-right($0value) {
  @include rfs($0value, margin-right);
}

@mixin margin-bottom($0value) {
  @include rfs($0value, margin-bottom);
}

@mixin margin-left($0value) {
  @include rfs($0value, margin-left);
}
